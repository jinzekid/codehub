3D应用程序中的旋转通常以两种方式之一表示，
  1.四元数
  2.欧拉角
  每个都有自己的用途和缺点。 
  Unity在内部使用Quaternions，但在检查器中显示等效Euler角度的值可以轻松编辑。

------------------------------------------------------------------------------------

欧拉角与四元数的区别
欧拉角
欧拉角具有更简单的表示，即顺序施加的X，Y和Z的三个角度值。
要将Euler旋转应用于特定对象，将依次应用每个旋转值，作为围绕其对应轴的旋转。

好处：
  1.欧拉角具有直观的“人类可读”格式，由三个角度组成。
  2.欧拉角可以表示从一个方向到另一个方向的旋转，旋转超过180度
限制：
  欧拉角受Gimbal Lock的影响。当依次施加三个旋转时，第一或第二旋转可以导致第三轴指向与先前轴之一相同的方向。
  这意味着“自由度”已经丢失，因为第三个旋转值不能围绕唯一轴应用。
     
四元数
四元数可用于表示对象的方向或旋转。此表示在内部由四个数字组成（在Unity中称为x，y，z和w）但是这些数字不代表角度或轴，
您通常不需要直接访问它们。除非您特别想深入研究四元数的数学，否则您只需要知道四元数代表3D空间中的旋转，
您通常不需要知道或修改x，y和z属性。
四元数可以表示方向或旋转 - 其中旋转是从旋转“原点”或“认同”。
因为旋转是以这种方式测量的 - 从一个方向到另一个方向 - 四元数不能代表超过180度的旋转。

好处：
   四元数轮换不受万向节锁定的影响。
限制：
   单个四元数不能表示任何方向的旋转超过180度。
   四元数的数字表示在直观上是不可理解的。
   
在Unity中，所有游戏对象旋转都在内部存储为Quaternions，因为它们的好处超过了限制。

处理脚本中的处理旋转时
应该使用Quaternion类及其函数来创建和修改旋转值。在某些情况下，使用欧拉角是有效的，
但你应该记住： - 你应该使用处理欧拉角的四元数类函数 - 从旋转中检索，修改和重新应用欧拉值会导致无意识的副作用。

------------------------------------------------------------------------------------

常用方法：
Creating(创建):
Quaternion.LookRotation
Quaternion.AngleAxis
Quaternion.FromToRotation

Manipulating(操作):
Quaternion.Slerp
Quaternion.Inverse
Quaternion.RotateTowards
Transform.Rotate & Transform.RotateAround




