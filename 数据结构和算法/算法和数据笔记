常用排序算法
  1.桶排序   （时间复杂度O(m+n)）
    
  2.快速排序  (平均时间复杂度O(nlogn)，最坏时间复杂度O(n^2))
    基于“二分”思想
    
    C版本：
      /**************我是代码分隔符/**************/
      void itoj(int a[], int i, int j) {
        int tmp = a[i];
        a[i] = a[j];
        a[j] = tmp;
      }
      
      void quick_sort(int a[], int low, int high) {
        if (low > high) return a;
        
        int pi = a[low];
        int i = low;
        int j = high;
        
        while (i < j) {
          while (a[j] >= pi && i < j) j--;
          while (a[i] <= pi && i < j) i++;

          if (j > i) {
            itoj(a, i, j);
          }
       }
       
       itoj(a, low, i);
       quick_sort(a, low, i-1);
       quick_sort(a, i+1, high);
      }
      /*******************************************/

    
    Python版本：
      /**************我是代码分隔符**************/
      def parition(seq):
        pi, seq = seq[0], seq[1:]
        lo = [x for x in seq if x <= pi]
        hi = [x for x in seq if x > pi]
        return lo, pi, hi
      
      def quick_sort(seq):
        if len(seq) <= 1: return seq
        lo, pi, hi = partition(seq)
        return quick_sort(lo) + pi + quick_sort(hi)
      /*******************************************/

  3.堆排序   （时间复杂度O(nlogn)）
    
  4.冒泡排序（不推荐，太慢，时间复杂度O(n^2)）
  
  
/**************我是华丽的分割线**************/
常用数据结构
  1.数组
    特点：连续一片内存块空间
         读取速度块
         插入和删除速度慢
    
  2.队列
    特点：先进先出
    存储结构：顺序队列
            链式队列
            
    C版本：
      // 简单定义
      struc queue {
        int data[100];
        int head;
        int tail;
      }
      
      // 顺序队列
      typdef int QElemType; // 定义类型别名
      struct seqQueue {
        QElemType *base;  // 初始化动态分配空间
        int head;         // 头指针
        int tail;         // 尾指针
        int queueSize;    // 当前分配的存储容量
      }
      
      // 循环队列
      typdef int QElemType; // 定义类型别名
      struct linkQueue {
        QElemType *base;  // 初始化动态分配空间
        int head;         // 头指针
        int tail;         // 尾指针
      }
            
  3.栈
    特点：先进后出
    存储结构：顺序栈
            链式栈
            
    C版本：
      // 顺序栈
      typdef int SElemType; // 定义类型别名
      struct stack {
        SElemType data[100];
        int top;
      }
      
      // 链式栈
      typdef int SElemType; // 定义类型别名
      struct seqStack {
        SElemType *base;
        SElemType *top;
        int stackSize;
      };
      
            
  4.链表
    特点：存储空间根据指针相连（空间利用率高）
         插入和删除速度快
         读取速度慢
         
    存储结构：线性表
            循环链表
            双向链表
    
    C版本：//静态单链表
      #define MAX_SIZE 100
      typedef struct {
        ElemType data;
        int cur;
      }SLinkList[MAX_SIZE];
    


